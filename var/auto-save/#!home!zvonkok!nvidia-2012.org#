#+TITLE: NVIDIA 2021
#+AUTHOR: ZVONKO KAISER
#+DESCRIPTION: WORK TRACKING

meinvatererklaertmirjedensonntagdieneunplaneten

2a6zy3d92a6zy3d9

* gitlab token

FpmusxMbCRjvLsy3y1Pn

* github token

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



* ARM SUPPORT

* Review NFD

https://github.com/kubernetes-sigs/node-feature-discovery/issues/468

* EGX


#+name: input_block
#+BEGIN_SRC elisp :export none :results none
(completing-read "a=" nil)

#+END_SRC

#+BEGIN_SRC C++  :results output :export code :tangle myfile.cpp :var input=input_block
  #include <stdlib.h>
  #include <iostream>
  using namespace std;

  int main()
  {
  int a = atoi(input);
  cout<<a+1;
  }
#+END_SRC

# SCJ4
#+BEGIN_SRC bash :results output :var input=input_block
# Download: https://gitlab-master.nvidia.com/ngcsecurity/nvinit/tree/master/bin/test
nvinit ssh -user zkaiser -vault-role sshca-usercert/issue/ngc-egx
#+END_SRC

#+RESULTS:



# CNT Server Configuration Details
  https://docs.google.com/spreadsheets/d/1EGFu-3YpVuTSUqp3Mhevz2PtbKtlRCeTOTKVBEROghs/edit#gid=234956698


#+END_SRC




* nvcr.io

** NGC CLI
#+BEGIN_SRC bash
ngc config set
#+END_SRC

** Docker, Podman
#+BEGIN_SRC bash
docker login nvcr.io

# Username: $oauthtoken
# API KEYPassword: bjZwcHBqaTgzZjJoMW5hZmNwc2Y4dnY3MnA6MTFjNDFiMjEtYWJkMC00MjUzLWJkNmUtN2Q3ODYxMDJlNDk3
# API Key: bjZwcHBqaTgzZjJoMW5hZmNwc2Y4dnY3MnA6MTFjNDFiMjEtYWJkMC00MjUzLWJkNmUtN2Q3ODYxMDJlNDk3

#+END_SRC

* certification NGC

NGC PM Kristina Joos


* NVIDIA_COMPUTE_CAPABILITIES ? -> minimized packages

* GDS -> NFD

* vGPU
** vGPU NFD
https://confluence.nvidia.com/display/GRIDSW/vGPU+device+exposure+of+host+driver+version+Design+D

ocument


* Kata

* kubeVirt
** Ryan Hallisay

TODO: Meet with Ryan Hallisay


* Converged Cards


| Name                     |         BMC IP | BMC User | BMC Pass    | NIC MAC |             IP | User     | Pass       | GPU     | NIC     |
|--------------------------+----------------+----------+-------------+---------+----------------+----------+------------+---------+---------|
| R740-2                   | 10.152.140.144 | root     | nvidia1234  | n/a     | 10.152.140.132 | sysadmin | nvidia1234 | A10     | CX-6 DX |
| R740-2A (slot 1)(rshim0) | 10.152.140.246 | root     | nvidia1234  | n/a     |           root | 3tango   | n/a        | CX-6 DX |         |
| R740-2B (slot 8)(rshim1) | 10.152.140.184 | root     | nviddia1234 | n/a     | 10.152.140.186 | root     | 3tango     | A10     | CX-6 DX |


# SEPARATED:
$ sudo mlxconfig -d  /dev/mst/mt41686_pciconf0 s INTERNAL_CPU_MODEL=0

** Kata

# file: /etc/default/grub
# GRUB_CMDLINE_LINUX_DEFAULT="intel_iommu=on"

GRUB_CMDLINE_LINUX_DEFAULT="iommu=pt intel_iommu=on modprobe.blacklist=nouveau vfio-pci.ids=10de:2236"

$ update-grub



*** Containerd

$ sudo mkdir /etc/containerd
$ sudo bash -c "containerd config default > /etc/containerd/config.toml"

# file: config.toml
[plugins]
  [plugins."io.containerd.grpc.v1.cri"]
    [plugins."io.containerd.grpc.v1.cri".containerd]
      default_runtime_name = "kata"
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.kata]
          runtime_type = "io.containerd.kata.v2"


$ image="docker.io/library/busybox:latest"
$ sudo ctr image pull "$image"
ocker.io/library/busybox:latest:                                                 resolved       |++++++++++++++++++++++++++++++++++++++|
index-sha256:f7ca5a32c10d51aeda3b4d01c61c6061f497893d7f6628b92f822f7117182a57:    done           |++++++++++++++++++++++++++++++++++++++|
manifest-sha256:febcf61cd6e1ac9628f6ac14fa40836d16f3c6ddef3b303ff0321606e55ddd0b: done           |++++++++++++++++++++++++++++++++++++++|
layer-sha256:24fb2886d6f6c5d16481dd7608b47e78a8e92a13d6e64d87d57cb16d5f766d63:    done           |++++++++++++++++++++++++++++++++++++++|
config-sha256:16ea53ea7c652456803632d67517b78a4f9075a10bfdc4fc6b7b4cbf2bc98497:   done           |++++++++++++++++++++++++++++++++++++++|
elapsed: 2.2 s                                                                    total:  4.2 Ki (1.9 KiB/s)
unpacking linux/amd64 sha256:f7ca5a32c10d51aeda3b4d01c61c6061f497893d7f6628b92f822f7117182a57...
done: 42.066541ms

$ sudo ctr run --runtime "io.containerd.kata.v2" --rm -t "$image" test-kata uname -r
5.10.25 # Host is running 5.4.0-89-generic

*** Configure Kata

qemu ...


*** Build Kata Containers Kernel

$ ./build-kernel.sh -v 5.10.25 -g nvidia -f -d setup
$ ./build-kernel.sh -v 5.10.25 -g nvidia -f -d build
$ ./build-kernel.sh -v 5.10.25 -g nvidia -f -d install

*** Prepare passthrough

VFIO-PCI is built-in so modprobe.d is not working we have to supply kernel
arguments.


$ lspci -nn | grep -i nvidia
40:00.0 3D controller [0302]: NVIDIA Corporation Device [10de:2236] (rev a1)

GRUB_CMDLINE_LINUX_DEFAULT="intel_iommu=on vfio-pci.ids=10de:2236,15b3:1978"

IOMMU Group 66:
	3c:01.0 PCI bridge [0604]: Mellanox Technologies MT42822 Family [BlueField-2 SoC PCIe Bridge] [15b3:1978] (rev 01)
	3e:00.0 PCI bridge [0604]: Mellanox Technologies MT42822 Family [BlueField-2 SoC PCIe Bridge] [15b3:1978] (rev 01)
	3f:08.0 PCI bridge [0604]: Mellanox Technologies MT42822 Family [BlueField-2 SoC PCIe Bridge] [15b3:1978] (rev 01)
	40:00.0 3D controller [0302]: NVIDIA Corporation Device [10de:2236] (rev a1)



* Network Operator


* OpenShift SNO on AWS



* RDMA related stuff

** run RDMA as user set limits


* Headless Drivers
Mittman

* OpenCL, SYCL
Lopa Kundu


* rlimit support k8s


meinvatererklaertmirjedensonntagdieneunplaneten


* kind
#+BEGIN_SRC yaml
# three node (two workers) cluster config
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
- role: worker
- role: worker
#+END_SRC


* kind vGPU
#+BEGIN_SRC yaml
# three node (two workers) cluster config
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
nodes:
- role: control-plane
- role: worker
  extraMounts:
  - hostPath: /dev/vfio
    containerPath: /dev/vfio
  - hostPath: /run/nvidia
    containerPath: /run/nvidia
    propagation: Bidirectional
#+END_SRC
